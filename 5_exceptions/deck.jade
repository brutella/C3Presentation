.slide
	h1 Exceptions and File Access

.slide
	h2 Overview
	
	ul
		li Exceptions
		ul
			li Syntax
			li Exceptions in a function/method
			li Base Class exception
			li User Defined Exception Classes
		li File Access
		ul
			li Write Data
			li Read Data
			

.slide
	h2 Exceptions
	
	ul
		li Errors may occur within a program at any time in any situation
		li Handling an error within a function/method is often not appropriate
		li Caller of a function/method may handle the error
		li Exceptions automate error propagation
		ul
			li As long as an error is not handled it is propagated to the previous caller on the stack
			li Unhandled errors abort the program

.slide
	h2 Exceptions
	
	div Typical Exceptions
	ul
		li Division by 0
		li Array overflow
		li File I/O errors
		li Network connection errors
		li NULL pointer exceptions
	
	div New languages have built-in exception handling
	ul 
		li Java, C#
		li C++ has no built-in exception handling, doesn't throw exception automatically

.slide
	h2 Exceptions
	
	ul 
		li Exceptions may have any data type
		li Exceptions are not checked by the compiler
	pre.prettyprint.
		try{
			// Encapsulate critical code that may cause an exception in a try block, 
		}catch(type name){
			// Catch an exception of a given type.
		}
	
	p You can throw an exception manually
	pre.prettyprint.
		throw exceptionObject;

.slide
	h2 Exceptions Example
	
	pre.prettyprint.
		int divide (int a, int b){
			if (b == 0) {
				throw 0;
			}
			return a/b;
		}
	
		int main (){
			try {
				cout << divide(10, 0);
			} catch (int exception) {
				cout << "Division by Zero.";
			} catch (...) { // all other exceptions
				cout << "An error occurred.";
			}
		}

.slide
	h2 Exceptions

	ul
		li Functions can be restricted
		li Defines what types of exceptions are thrown
		li Keyword: 
			code throw
	
	pre.prettyprint.
		int divide (int a, int b) throw (int){
			if (b == 0) {
				throw 0; // only throwing int allowed
			}
			return a/b;
		}
		
		int divide (int a, int b) throw (type){} // throws an exception of type
		int divide (int a, int b) throw (){} // doesn't throw any exception
	

.slide
	h2 Base class 
		code exception
	
	p C++ standard library provides a base class 
		code exceptions
	ul
		li defined in the 
			code exception
			&nbsp;header file
		li under the namespace 
			code std
	
	div It has a
	ul
		li default and copy constructors, operators and destructors,
		li virtual member function 
			code what()
			&nbsp;which can be overridden (returns a null-terminated character sequence)

.slide
	h2 Base class 
		code exception
	
	pre.prettyprint.
		class exception {
		public:
			exception() throw();
			exception(const exception&) throw();
			exception& operator=(const exception&) throw();
			virtual ~exception() throw();
			virtual const char* what() const throw();
		private:
			...
		};

.slide
	h2 Class hierarchy
	
	div They are defined in the 
		code stdexcept
		&nbsp;library
	pre.prettyprint.
		#include <stdexcept>
		using namespace std;
	img(src="exceptions.png")

.slide
	h2 Exceptions Example
	
	div Check if memory can be allocated
	ul
		li Exception of type 
			code bad_alloc
			&nbsp;is thrown
	
	pre.prettyprint.
		try{
			int* array = new int[100];
		}catch(bad_alloc&){
			cout << "Error allocating memory" << endl;
		}

.slide
	h2 User Defined Exception Class
	
	pre.prettyprint.
		class MyException : public exception{
			int _errorCode;
		public:
			MyException() : exception(){
				_errorCode = 0;
			}
			
			MyException(int errorCode) : exception(){
				_errorCode = errorCode;
			}
			
			const char* what() throw(){
				stringstream sstream;
				sstream << "exception: " << m_errorCode;
				string message = sstream.str();
				
				return message.c_str();
			}
		}

.slide
	h2 Exceptions
	
	ul
		li Exceptions need not to be catched
		li Exceptions can be explicitly forwarded to the caller
		li Exception objects may contain data (see previous slide)
		li Exceptions may be organized in class hierarchies
		li Missing compared to Java
		ul
			li finally block
			li Checked exceptions (throws statement)
			li Built-in exceptions (e.g. for arrays or pointers)

.slide
	h2 Exceptions Example - 
		code SaveArray
	
	pre.prettyprint.
		class SaveArray{
			int _maxSize;
			int* _array;
		public:
			SaveArray(int size);
			int& operator[](int index);
		};
		
		class RangeException : public exception {
			int _index;
		public:
			RangeException(int index);
			const char* what() throw();
		};
		
		class SizeException : public exception {
			int _size;
		public:
			SizeException(int size);
			const char* what() throw();
		};
	
.slide
	h2 Exceptions Example - 
		code SaveArray
	pre.prettyprint.
		RangeException::RangeException(int index) throw(){
			_index = index;
		}

		const char* RangeException::what() const throw(){
			stringstream sstream;
			sstream << "range exception for index " << _index;
			string message = sstream.str();

			return message.c_str();
		}

		SizeException::SizeException(int size) throw(){
			_size = size;
		}

		const char* SizeException::what() const throw(){
			stringstream sstream;
			sstream << "size exception for size " << _size;
			string message = sstream.str();

			return message.c_str();
		}

.slide
	h2 Exceptions Example - 
		code SaveArray
	
	p Implementation of 
		code SaveArray
	pre.prettyprint.
		SaveArray::SaveArray(int size){
			if(size < 0){
				throw SizeException(size);
			}
		}
		
		int& SaveArray::operator[](int index){
			if(index < 0 || index >= _maxSize){
				throw RangeException(index);
			}
			return _array[index];
		}

.slide
	h2 Exceptions Example - 
		code SaveArray
	
	div Exception when accessing array element
	pre.prettyprint.
		try{
			SaveArray array(10);
			array[11] = 0;
		}catch(RangeException& e){
			cout << e.what() << endl; // range exception for index 11
		}
	
	div Exception when creating array
	pre.prettyprint.
		try{
			SaveArray array(-1);
		}catch(SizeException& e){
			throw e; // Explicitly forward to caller
		}

.slide
	h2 File Access
	
	div Classes to perform output and input to/from files
	ul
		li 
			code ofstream
			&nbsp;: stream class to write to files
		li 
			code ifstream
			&nbsp;: stream class to read from files
		li 
			code fstream
			&nbsp;: stream class to both read and write from/to files
	
	div Classes are derived from 
		code istream
		&nbsp;and 
		code ostream
	ul
		li Use insertion operator 
			code <<
			&nbsp;to write data to a text file
		li Use extraction operator
			code >>
			&nbsp;to read data from a text file

.slide
	h2 File Access
	
	div Steps for reading from a file
	ol
		li Open file
		pre.prettyprint.
			fstream file;
			file.open(filename, mode)
		li Read/Write to file
			div If you can read or write to a file depends on the opening mode (see next slide)
		li Close file
			div Close a file to make resource available
		pre.prettyprint.
			file.close();

.slide
	h2 File Access - File Open
	
	div Open the file 
		code my_text_file.txt
	pre.prettyprint.
		fstream file;
		file.open("my_text_file.txt", ios::read); // open the file for read access
		fail(file);
	
	div Methods to check state of the file stream
	ul
		li 
			code is_open()
			&nbsp;: returns true when the file is open
		li 
			code bad()
			&nbsp;: true if reading or writing operation failed
		li 
			code fail()
			&nbsp;: true for the same cases as 
			code bad()
			&nbsp;but also for format errors (get integer when trying to read a character)
		li 
			code eof()
			&nbsp;: returns true when we reached the end of a file
		li
			code good()
			&nbsp;returns true when 
			code bad(), fail(), eof()
			&nbsp;returns false

.slide
	h2 File Access - File Open Modes
	
	table
		tr
			th Mode
			th Description
		tr
			td 
				code ios::in
			td Open for input operations (read)
		tr
			td 
				code ios::out
			td Open for output operation (write)
		tr
			td
				code ios::binary
			td Open in binary mode
		tr
			td 
				code ios::ate
			td Initial position is at the file end, If this flag is not provided, initial position is the beginning at default.
		tr
			td
				code ios::app
			td Appending data to the end of the file, can only be used for output-only operations.
		tr
			td
				code ios::trunc
			td If file exists and opened for output operations, it gets replaced by a new one.

.slide
	h2 File Access - File Open Modes
	p Mode flags can be combined using the bitwise operator OR
	pre.prettyprint.
		fstream file;
		file.open("my_text_file.txt", ios::binary | ios::in);
			
	p Use method 
		code fail()
		&nbsp;to check if operation was successful
	
	pre.prettyprint.
		if(file.fail()){
			cout << "Couldn't open file" << endl;
		}

.slide
	h2 File Access - File Open Modes
	
	p ofstream, ifstream and fstream have a default mode when calling 
		code open()
		&nbsp;without second argument
	table
		tr
			th Class
			th Default mode parameter
		tr
			td 
				code ofstream
			td 
				code ios::out
		tr
			td 
				code ifstream
			td 
				code ios::in
		tr
			td
				code fstream
			td
				code ios::in | ios::out

.slide
	h2 File Access - Write Data
	
	p Write binary data in general
	pre.prettyprint.
		ostream& ostream::write(const char* s, streamsize n);
	
	ul
		li 
			code s
			&nbsp;: pointer to the data which should be written
		li 
			code n
			&nbsp;: size (in characters = bytes) of the data to write

	pre.prettyprint.
		int arr[4] = { 1, 2, 3, 4 };
		double amount = 12.34;
		
		ofstream file;
		file.open("medialibrary1.dat", ios::binary);
		file.write((char*)arr, sizeof(int) * 4);
		file.write((char*) &amount, sizeof(double));
		file.close();

.slide
	h2 File Access - Read Data
	
	p Read binary data in general
	pre.prettyprint.
		istream& istream::read(const char* s, streamsize n);
	
	ul
		li 
			code s
			&nbsp;: pointer to the data where the content read will be stored
		li 
			code n
			&nbsp;: size (in characters = bytes) of the data to be read
	pre.prettyprint.
		int arr[4];
		double amount;
		
		ifstream file;
		file.open("medialibrary1.dat", ios::binary);
		file.read((char*)arr, sizeof(int) * 4);
		file.read((char*) &amount, sizeof(double));
		file.close();	

.slide
	h2 The 
		code const
		&nbsp;Mysterium
	
	p The keyword 
		code const
		&nbsp;can be used mostly everywhere
	pre.prettyprint.
		static const Rectangle* const createNew(const Rectangle* const rect){
			rect->x = 0; // Error: const Rectangle
			rect = &Rectangle(); // Error: Rectangle* const
			...
		}
		
		int main(){
			Rectangle rect1;
			const Rectangle* const rect2 = Rectangle::createNew(&rect1);
			rect2->x = 0; // Error: const Rectangle
			
			Rectangle rect3;
			rect2 = &rect3; // Error: Rectangle* const
		}
	
	p Read from left-to-right

.slide
	h2 The 
		code const
		&nbsp;Mysterium
	
	ol
		li What does 
			code const int* p
			&nbsp;mean?
		p.slide p is a pointer to a constant int, p can't change the value of the int it's pointing to
		
		li What's the difference between 
			code const int* p
			&nbsp;(1), 
			code int* const p
			&nbsp;(2) and 
			code const int* const p
			&nbsp;(3)?
		
		p.slide (2) p is a constant pointer to an int
		p.slide (3) p is a constant pointer to a constant int
		
		li What does 
			code const int& x
			&nbspp;mean?
		p.slide x is a reference to a constant int

.slide
	h2 Reference vs Pointer
	
	ul
		li What is a reference? 
			code int& r = i;
			
	p.slide An alias (an alternate name) for an object, In other words, the reference of an object is not a pointer, nor a copy, but the object itself (see call-by-reference)
	div.slide Implementation detail:
		ul
			li underneath it's all a reference to the object, calling 
				code r++;
				&nbsp;increments the value, 
				code r
				&nbsp;is kind of a macro like 
				code (*i)
	
	ul
		li What's the difference between a reference and a pointer?
		li What does 
			code int& const x
			&nbsp;mean?


