.slide
	h1 Inheritance and Polymorphism in C++

.slide
	h2 Overview
	
	ul
		li Inheritance
			ul
				li Base class and sub class
				li Access specifiers
				li Constructors
				li Multiple Inheritance
		li Polymorphism
			ul
				li Static vs. Dynamic Type
				li Generic Methods and Types
				li Virtual Methods
		li Abstract Classes
		li Interfaces

.slide

	h2 Inheritance
	
	ul
		li Inherit to create hierarchy of classes
			ul
				li Bases class provides basic/shared functionality
				li Subclass extends base class for specific functionality
		li Subclass inherits
			ul
				li Member variables
				li Implemented methods and interfaces expect constructor and destructor

.slide
	h2 Inheritance
	
	ul
		li Subclass may
			ul
				li use existing members and methods
				li add new members and methods
				li override members and methods
		li Inheritance is transitive (a derived class inherits from all its ancestor classes)
			div If 
				code C
				&nbsp;is derived from 
				code B
				&nbsp;, and 
				code B
				&nbsp;is derived from 
				code A
				&nbsp;, then 
				&nbsp;C
				&nbsp;inherits the members declared in 
				code B
				&nbsp;and 
				code A
		li Subclass can not remove inherited members

.slide
	h2 Inheritance
	
	ul
		li Subclass extends the base class
		li Subclass is a "specialization" of the base class
		li Subclasses are compatible with the base class

	div Example
	img(src="inheritance.png")

.slide
	h2 Base Class
	
	p Common functionality should be in a base class!
	
	div Example articles
	ul
		li Price
		li Number
		li Title/Name
	
	pre.prettyprint.
		class Article {
		private:
			string m_number;
			string m_title;
			double m_price;
		public:
			Article() { ... }
			string getNumber() const { return m_number; }
			string getTitle() const { return m_title; }
			double getPrice() const { return m_price; }
		};

.slide
	h2 Derived Class
	
	p Adds special functionality for specific use cases
	
	div Example book
	ul
		li Author
		li Publisher
		li ISBN Number
	
	pre.prettyprint.
		class Book: public Article {  // Book is derived from Article
		private:
			string m_author;
			string m_publisher;
			double m_isbn;
		public:
			Book() { ... }
			string getAuthor() const { return m_author; }
			string getPublisher() const { return m_publisher; }
			string getIsbn() const { return m_isbn; }
		};
	
.slide
	h2 Derived Class
	
	p Class 
		code Book
		&nbsp;inherits all features of 
		code Article
	
	pre.prettyprint.
		Book book;
		book.getAuthor();
		book.getPublisher();
		book.getIsbn();
		
		// Method from super class
		book.getNumber();
		book.getTitle();
		book.getPrice();
	
.slide
	h2 Inheritance Access Specifiers
	
	p Base class may be provided with an access specifier
	
	pre.prettyprint.
		class Derived: public Base { ... };
		class Derived: protected Base { ... };
		class Derived: private Base { ... };
		class Derived: Base { ... };
	
	p Restricts access to 
		code Base
		&nbsp;for the children of 
		code Derived
	
	ul
		li public: all access specifiers in Base preserve their meaning
		li protected: public members of Base become protected (visible for subclasses)
		li private: all members of Base become private (default)
	
	p Typically, simply public inheritance is applied

.slide
	h2 Inheritance Access Specifiers - Example
	
	pre.prettyprint.
		class Book : Article {};
		
		book.getAuthor(); // Compiler error
	
	pre.prettyprint.
		class Book : protected Article {};
		
		book.getAuthor(); // Compiler error
	
	pre.prettyprint.
		class Book : private Article {};
		
		book.getAuthor(); // Compiler error


.slide
	h2 Constructors
	
	ul
		li The constructors of a base class are not inherited
			ul
				li Derived class is responsible for initializing data members of base class
		li A derived class must define its own constructor
			ul
				li May call (in its initalization list) a constructor of the base class
				li Otherwise, the default constructor of base class is called first

.slide
	h2 Constructors - Example
	
	pre.prettyprint.
		class Book: public Article {
		public:
			Book(string number, string title, double price, string author, string publisher, string isbn) 
				: Article(number, title, price), m_author(author), m_publisher(publisher), m_isbn(isbn) {}
		};

.slide
	h2 Multiple Inheritance
	
	p In C++ a class may have multiple parents
	
	pre.prettyprint.
		class Derived : public Base1, public Base2{
			...
		};
	
	ul
		li 
			code Derived
			&nbsp;inherits from 
			code Base1
			&nbsp;and 
			code Base2
			ul
				li Object contains separate "subobjects" for each base class
		li Hierarchy is a graph (not a tree)
			ul
				li Name conflicts possible

.slide
	h2 Multiple Inheritance
	
	p Name clashes have to be resolved by qualification
	
	img(src="multiple_inheritance.png")
	
	div Resolve ambiguity in 
		code C
		&nbsp;with scope operator
		code (A::x, B::x)

.slide
	h2 Share base class object - Diamond Problem
	
	div.span9
		pre.prettyprint.
			class Book: public Article {}
			class Cd: public Article {}
			class BookCD: public Book, public Cd {}
			
			BookCD bookCD;
			bookCD.getPrice(); // Ambiguous
			bookCD.Book::getPrice();
			bookCD.Cd::getPrice();
			
	div.span7
		img(src="multiple_inheritance_shared_base_class.png")
	
	p Class 
		code BookCD
		&nbsp;contains two separate subobjects of 
		code Article
	p Method 
		code getPrice();
		&nbsp;is available in both super classes
	
		div.note This situation is sometimes referred to as diamond inheritance because the inheritance diagram is in the shape of a diamond. Virtual inheritance can help to solve this problem.
	
		
.slide

	h2 Share base class object - Virtual Access Specifier
	
	div.span9 
		pre.prettyprint.
			class Book: public virtual Article {}
			class Cd: public virtual Article {}
			class BookCD: public Book, public Cd {}
			
			BookCD bookCD;
			bookCD.getPrice(); // Unambiguous
	
	div.span7
		img(src="multiple_inheritance_shared_base_class.png")
		
	p Specifier 
		code virtual
		&nbsp;lets corresponding subobjects be merged to one

.slide
	h2 Polymorphism
	
	ul
		li Objects of the subclass type can be used instead of objects of the baseclass type
		li Subclass is compatible with the base class
		li Code that works with objects of a certain class also works with objects of subclasses (e.g. collection classes)
		li In C++ solved with pointers

	pre.prettyprint.
		void printArticle(Article* a) {
			cout << a->getTitle();
		}
		
		Article* pArticle = new Article("100", "Article1", 9.90);
		Book* pBook = new Book("200", "C++", 24.90, "Stroustrup", "", "1-23");
		printArticle(pArticle);
		printArticle(pBook);

.slide
	h2 Polymorphism
	
	img(src="inheritance_polymorphism.png")
	
	pre.prettyprint.
		Article* pArticle; // Static type "Article"
		Book* pBook; // Static type "Book", dynamic type "Article"

.slide
	h2 Static vs. Dynamic Types
	
	div Static Type
	
	ul
		li The type appearing in the declaration
		li Is known at compile time
		li Determines which members can be accessed

	div Dynamic type
	
	ul
		li The type of the object stored at runtime (can change)
		li May be (directly or indirectly) derived from the static type
		li Determines which virtual member functions are called (see later)
	
	p A polymorph variable (class needs a virtual function) may refer to objects of the static type or of any subclass
	
.slide
	h2 Static vs. Dynamic Types
	
	div.span10
		pre.prettyprint.
			Article* pArticle = new Article("100", "Article1", 9.90);
			Book* pBook = new Book("200", "C++", 24.90, "Stroustrup", "", "1-23");
		
			pArticle->setTitle("Basic Article"); // ok
			pBook->setPublisher("Addison-Wesley"); // ok
	
	div.span6
		img(src="polymorphism_1.png")
	
	
	div.span10
		pre.prettyprint.
			pArticle = pBook;
			pArticle->setPublisher("dpunkt"); // compiler error
			pArticle->setPrice(29.90); // ok
	
	div.span6
		img(src="polymorphism_2.png")


.slide
	h2 Dynamic Casts
	
	p A pointer variable of a subclass type can always be assigned to a pointer variable of the baseclass
	div.alert-message.error Inverse assignment is not possible - Cast is needed
	
	pre.prettyprint.
		Article* pArticle;
		Book* pBook = new Book("123", "C++", 24.90, "Stroustrup", "", "1-23");
		pArticle = pBook; // ok
		pBook = pArticle; // error
		pBook = dynamic_cast<Book*>(pArticle); // ok

	div dynamic_cast: Checks whether pointer points to an object of class 
		code Book
		&nbsp;(or subclass), If yes, it returns a pointer of type 
		code Book*
		&nbsp;to the object; if not, a 
		code NULL
		&nbsp;pointer is returned

.slide
	h2 Generic Methods
	
	p Generic methods can operate on arguments of multiple dynamic types

	pre.prettyprint.
		void printInfo(Article* a) {
			cout << "Article " << a->getTitle();
			cout << " (" << a->getNumber() << "); ";
			cout << a->getPrice() << " Euro" << endl;
		}
		
		Book* pBook = new Book(...);
		Cd* pCd = new Cd(...);
		printInfo(pBook);
		printInfo(pCd);

.slide
	h2 Generic Types
	
	p Generic containers can contain elements of multiple dynamic types
	
	pre.prettyprint.
		class ShoppingCart {
			...
			void add(Article* a);
			Article* getArticle(int index);
		};
		
		ShoppingCart cart(...);
		Book* pBook = new Book(...);
		C* pCd = new Cd(...);
		cart.add(pBook);
		cart.add(pCd);
		Article* article = cart.getArticle(0); // may be book or Cd

.slide
	h2 Override methods
	
	div Inherited methods can be overridden
	ul
		li Same interface (same method signature)
		li 2 forms of override
			ul
				li Static override: Static Binding
				li Dynamic override: Dynamic Binding
	
	div Inherited methods can be overloaded
	ul
		li Different interface
		

.slide
	h2 Static Override
	
	pre.prettyprint.
		class Article{
		public:
			void printInfo(){
				cout << "Article: " << m_title;
			}
		};
		
		class Book: public Article{
		public:
			void printInfo(){
				cout << "Book: " << m_title << "|" << m_author;
			}
		};
	
	pre.prettyprint.
		void main(){
			Book* pBook = new Book("123", "C++", 24.90, "Stroutrup", "", "1-23");
			Article* pArticle = pBook;
			pArticle->printInfo(); // what is printed out?
		}

.slide
	h2 Virtual Methods
	
	ul
		li In C++, methods are statically linked per default
		li Keyword virtual is necessary for dynamically linked methods
		li Only non-static methods can be virtual
		li When a virtual function is called on an object, the function of the object's dynamic type is executed
		li Buzzword: Dynamic Binding
		li Dynamic Binding works only with polymorph variables (class needs min. one virtual method)
		li Base function may be still called
			div
				code object->Base::func(...)
		li In Java all methods are virtual and dynamically linked


.slide
	h2 Virtual Methods
	
	pre.prettyprint.
		class Article{
		public:
			virtual void printInfo(){
				cout << "Article: " << m_title;
			}
		};
		
		class Book: public Article{
		public:
			void printInfo(){
				cout << "Book: " << m_title << "|" << m_author;
			}
		};
	
	pre.prettyprint.
		void main(){
			Book* pBook = new Book("123", "C++", 24.90, "Stroutrup", "", "1-23");
			Article* pArticle = pBook;
			pArticle->printInfo(); // what is printed out?
		}

.slide
	h2 Generic Types/Methods


	pre.prettyprint.
		class ShoppingCart {
		private:
			int _number;
			Article* _articles[10];
		public:
			void add(Article* a){...}
			void printArticles(){
				for(int i = 0; i<_number;i++){
					_articles[i]->printInfo();
				}
			}
		};
		
		ShoppingCart cart(...);
		Book* pBook = new Book(...); cart.add(pBook); 
		C* pCd = new Cd(...); cart.add(pCd);
		cart.printArticles();
		
	div.alert-message.success Core of object-oriented programming: generic types/methods call the methods associated to the dynamic types of their elements/arguments.

.slide
	h2 Virtual Destructor
	
	div By default the destructor of a class is not virtual
	ul
		li If an object is deleted, the destructor of its static type is called
		li In most situations, this is not what is wanted/expected
	
	div A destructor can be declard as virtual in the base class
	ul
		li Then the destructor of the dynamic type is called
		li The destructors of derived classes automatically get virtual

.slide
	h2 Virtual Destructor
	
		
	pre.prettyprint.
		class Base { 
			virtual ~Base() { ... }
		};
		
		Base* object = new Derived();
		delete object; // Derived::~Derived() is called

	div.alert-message.info A class with virtual functions should also have a virtual destructor

.slide
	h2 Abstract Classes
	ul
		li Classes which can't be instantiated (no object can be created)
		li May serve as static types but not as dynamic ones
		li A class is abstract if at least one method is declared as pure virtual (= abstract method)
			div 
				code virtual void draw() = 0;
		li Abstract method may contain default implementation
		li Define an interface (no interface keyword in C++)
		li Requires implementation of parts or the whole interface in the subclasses

.slide
	h2 Abstract Classes
	
	pre.prettyprint.
		class GraphicObjects{
		public:
			virtual void draw() = 0;
		};
		
		class Rectangle : public GraphicObject{
		public:
			virtual void draw(){
			...
			}
		};
		
		GraphicObject* pGraphicObject = new GraphicObject(); // Compiler error
		GraphicObject* pGraphicObject = new Rectangle();
		pGraphicObject->draw();

.slide
	h2 Interfaces
	
	div An interface 
	ul
		li is an abstract class with only pure virtual functions
		li defines an abstract data type
			ul
				li Defines only the signature (operations) of a data type
	
	div A concrete class
	ul
		li Represents an implementation of the interface (data type)
		li Defines the concrete representation and the concrete realization of the operations on the type
	div.alert-message.info Interfaces make your software more flexible and modular!

.slide
	h2 Interfaces
	
	pre.prettyprint.
		public interface Serializable{
			void writeObject(ObjectOutputStream out);
			void readObject(ObjectInputStream in);
		}
	
		class Serializable{
			virtual void writeObject(ObjectOutputStream &out) = 0;
			virtual void readObject(ObjectInputStream &in) = 0;
		};

.slide
	h2 Interface implementation
	
	div Example
	pre.prettyprint.
		class Rectangle : public Serializable {
			virtual void writeObject(ObjectOutputStream &out) {
				out << _x << _y << _width << _height;
			}
			virtual void readObject(ObjectInputStream &in) {
				in >> _x >> _y >> _width >> _height;
			}
		};
		
		class Triangle : public Serializable {
			virtual void writeObject(ObjectOutputStream &out) {
				out << p1.x << p1.y << p2.x << p2.y << p3.x << p3.y;
			}
			virtual void readObject(ObjectInputStream &in) {
				in >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;
			}
		};

.slide
	h2 Interfaces
	
	pre.prettyprint.
		class SaveToFileOperation{
		private:
			vector<Serializable> _serializeAbleObjects;
		public:
			void save(string filename){
				ObjectOutputStream out; // get output stream
				for(int i = 0; i < _serializeAbleObjects.size(); i++){
					_serializeAbleObjects.at(i).writeObject(out);
				}
			}
		};

.slide
	h2 Structs vs Classes
	
	p Structs are very similar to classes
	
	div Main difference is the visibility of the members and inheritance
	ul
		li Members of structs are public as default
		li Members of classes are private as default
	
	ul
		li Inheritance between structs is public as default
		li Inheritance between classes is private as default

.slide
	h2 Structs vs Classes
	
	pre.prettyprint.
		struct Rectangle : GraphicsObject{
			// Members are public
			int _x;
			int _y;
		};
		
		class Rectangle : GraphicsObject{
			// Members are private
			int _x;
			int _y;
		};

.slide
	h2 
