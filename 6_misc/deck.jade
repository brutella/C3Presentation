.slide
	h1 Templates and Misc

.slide
	h2 Overview
	
	ul
		li Complex Types
		ul
			li Enumerations
			li Data Structures
		li Friend Functions and Classes
		li Operator Overloading
		li Templates
		ul
			li Introduction
			li Function Templates
			li Class Templates	

.slide
	h2 Enumerations

	ul
		li Assigns names to integer values
		li Enumeration starts with 0
		li Values may be assigned freely
		li Double values may be used
		li Calculations with enums create integer results
	
	code enum [enumName] {name[, name]};
	

.slide
	h2 Enumerations
	
	pre.prettyprint.
		class Material {
		public:
			enum MaterialType { wood, glass, steel, concrete };
		};
		
		void main() {
			Material::MaterialType mat1;
			Material::MaterialType mat2;
			
			int value;
			mat1 = Material::wood;
			mat2 = Material::steel;
			mat1 = mat2;
			mat2 = static_cast<Material::MaterialType>(Material::steel + Material::concrete);
			value = mat1;
			value = Material::glass;
		}

.slide
	h2 Enumerations
	
	pre.prettyprint.
		class Material {
		public:
			enum MaterialType { wood = 4, glass, steel = 2, concrete = -1 };
		};
		
		void main() {
			Material::MaterialType mat1;
			Material::MaterialType mat2;
			
			mat1 = Material::glass;
			mat2 = Material::steel;
		}

.slide
	h2 Friend Functions and Classes
	
	ul
		li Functions and Classes may be friends of another class
		li Keyword: 
			code friend
		li Friends have full access to all members of a class
		li Explicitly breaks information hiding for certain friends
		li For special usage (e.g. operator overloading)

.slide
	h2 Friend Functions
	
	pre.prettyprint.
		class A {
		private:
			int m_value;
		public:
			void setValue(int val);
			friend int getValue(A& obj); // not a member!!
		};
		
		int getValue(A& obj) { // doesn't belong to a class!!
			return obj.m_value;
		}
		
		int main() {
			A obj;
			obj.setValue(10);
			cout << obj.m_value << endl; // error
			cout << getValue(obj) << endl; // OK
		}

.slide
	h2 Friend Classes
	
	pre.prettyprint.
		class A {
		friend class B;
		private:
			int m_value;
		};
		
		class B {
			public: void Calc(A& obj) {
				obj.m_value = 10;
			}
		};

.slide
	h2 Operator Overloading
	
	ul
		li Operators are normal methods
		li Can be virtual
		li May be statically or dynamically bound
		li Can be overwritten
		li Can be overloaded
		li Definition

	code return-type [class-name::]operator#(arg-list){}

.slide
	h2 Operator Overloading
	
	ul
		li Allow well known notation for common operations on objects (e.g. mathematical operations)
		li No new operator tokens may be defined
		li Operators may be called explicitly
		li C++ is extensible but not mutable
		ul
			li Operators of base types cannot be overwritten
		li Nearly all operators can be overwritten
		li Exception: ::, ., .*, ?:

.slide	
	h2 Operator Overloading
	
	p Overloadable operators
	p +, -, *, /, =, <, >, +=, -=, *=, /=, <<, >>, <<=, >>=, ==, !=, <=, >=, ++, --, %, &, ^, !, |, ~, &=, ^=, |=, &&, ||, %=, [], (), ,, ->*, ->, new, delete, new[],  delete[]

.slide
	h2 Operator Overloading - Example
	
	pre.prettyprint.
		class Complex {
		private:
			double m_real;
			double m_imaginary;
		public:
			Complex(double real, double imaginary) : m_real(real), m_imaginary(imaginary) {}
			friend Complex operator+(Complex &c1, Complex &c2);
		};
		
		Complex operator+(Complex &c1, Complex &c2) {
			Complex temp;
			temp.m_real = c1.m_real + c2.m_real;
			temp.m_imaginary = c1.m_imaginary + c2.m_imaginary;
			return temp;
		}

.slide
	h2 Operator Overloading - Example
	
	pre.prettyprint.
		class Complex {
		private:
			double m_real;
			double m_imaginary;
		public:
			Complex(double real, double imaginary) : m_real(real), m_imaginary(imaginary) {}
			Complex operator+(Complex &c);
		};
		
		Complex Complex::operator+(Complex &c) {
			Complex temp;
			temp.m_real = m_real + c.m_real;
			temp.m_imaginary = m_imaginary + c2.m_imaginary;
			return temp;
		}	

.slide
	h2 Operator Overloading - Example
	
	pre.prettyprint.
		class Complex {
		private:
			double m_real;
			double m_imaginary;
		public:
			Complex(double real, double imaginary) : m_real(real), m_imaginary(imaginary) {}
			Complex operator+(int value);
		};
		
		Complex Complex::operator+(double value) {
			Complex temp;
			temp.m_real = m_real + value;
			return temp;
		}
	
		int main(){
			Complex c1(1,2), c2(4,5);
			c1 = c1 + c2;
			c1 = c1 + 2;
			c2 = 2 + c1;
			return 0;
		}

.slide
	h2 Operator Overloading - Assignment Operator
	
	pre.prettyprint.
		class Complex {
		public:
			void operator=(Complex &c);
			void operator=(double value);
		};
		
		void Complex::operator=(Complex &c) {
			m_real = c.m_real;
			m_imaginary = c.m_imaginary;
		}
		
		void Complex::operator=(double value) {
			m_real = value;
		}
	
		int main(){
			Complex c1(1,2), c2(4,5), c3(6,10);
			c1 = c2; // Complex::operator=(Complex &c);
			c1 = c1 + 2; // Complex::operator=(double value);
			c1 = c2 = c3; // Error
			return 0;
		}

.slide
	h2 Operator Overloading - Relational Operator
	
	pre.prettyprint.
		class Complex {
		public:
			bool operator==(Complex &c);
			void operator>(Complex &c);
			void operator<(Complex &c);
		};
		
		bool Complex::operator==(Complex &c) {
			return (c.m_real == m_real && c.m_imaginary == m_imaginary);
		}
	
		int main(){
			Complex c1(1,2), c2(4,5);
			if(c1 == c2){}
			if(c1 > c2){}
			if(c1 < c2){}
			if(c1.operator<(c2)){} // Call explicitly
			
			return 0;
		}

.slide
	h2 Operator Overloading - Arithmetic Operators
	
	pre.prettyprint.
		class Complex{
		public;
			Complex operator++() { ... } // prefix ++
			Complex operator++(int dummy) { ... } // postfix ++
			Complex operator-(Complex &c) { ... }
			Complex operator-() { ... }
		};
		
		void main(){
			Complex c1(1,2), c2(4,5);
			c1++;
			c2 = ++c1;
		}

.slide
	h2 
		code []
		&nbsp;Operator
	
	ul
		li Array access operator, also subscript operator
		li Considered as binary operator
		li Typically with parameter of type int
	
	div Definition	
	code type class-name::operator[](int idx) { }
	
.slide
	h2 
		code []
		&nbsp;Operator
	
	pre.prettyprint.
		class Stack{
		public:
			Stack();
			~Stack();
			void push(int value);
			void pop(int value);
			int operator[](int index);
		};
		
	pre.prettyprint.
		Stack st;
		st.push(10);
		st.push(20);
		st[1]; // use subscript operator

.slide
	h2 Templates
	
	p Problem: Many classes and functions do the same operations for different data types, e.g. sorters, containers
	
	div Solution
	ul
		li Copy&Paste Programming
			div No level of abstraction
		li Dynamic Binding
			div Abstraction level: medium
		li Templates
			div Abstraction level: high

.slide
	h2 Templates - Example
	
	p Example: Sorted linked list of data (e.g. int, float, char, any object)
	
	div Supported operations
	ul
		li Sorted add
		li Remove
		li Find data in the list
	
	p General Form
	
	img(src="linked_list.png")

.slide
	h2 Templates - Example
	
	p Simple Linked list with Nodes
	pre.prettyprint.
		class LinkedList{
			Node* first;
		};
		
		class Node{
		public:
			Node* nextNode;
			int data;
		};


.slide
	h2 Templates - Linked List with Copy&Paste Programming
	
	p Create class for every case
	
	img(src="linked_list_copy_paste.png")
	
.slide
	h2 Templates - Linked List with Dynamic Binding
	
	p Create base class, which has to be derived
	
	img(src="linked_list_dynamic_binding.png")

	pre.prettyprint.
		class Node{
		public:
			Node* nextNode;
			Object* data;
		};

.slide
	h2 Templates - Linked List with Templates
	
	div Templates enable generic functions and classes
	ul
		li Function templates
		li Class templates
		li Define a general set of operations on different types
		li Types are template parameters
		li Each "instance" of a template results in new code
		li Allow overloading and inheritance

.slide
	h2 Function Templates
	
	ul
		li Creates automatically overloaded functions
		li Restrictions
		ul
			li Only C++ linkage
			li No virtual functions allowed
		li  Destructors cannot be template functions
	p Definition
	
	pre.prettyprint.
		template <class identifier> function_declaration;
		template <typename identifier> function_declaration;

.slide
	h2 Function Templates - Example
	
	p Definition of a function template with type parameter 
		code T
	pre.prettyprint.
		template <class T> T min(T a, T b){
			T minimum = a;
			if(a > b){
				minimum = b;
			}
			
			return minimum;
		}
	
	p Template T can be of any type, class has to support the required operators
	
.slide
	h2 Function Templates - Example
	
	p Instantiation of parameter T by a concrete type
	ul
		li Instantiated function declaration is generated and compiled
		li Compiler is able to automatically deduce the instantiation type
		
	pre.prettyprint.
		int x = min<int>(10, 20);         // explicit instantiation of min<int>
		float y = min<float>(10.4, 20.3); // explicit instantiation of min<float>
		int z = min(20, 15);              // implicit instantiation of min<int>

.slide
	h2 Funtion Templates - Example
	
	pre.prettyprint.
		int main() {
			Rectangle a, b;
			Rectangle c = min(a, b);  // what happens here?
		}
	
	div Generated function
	pre.prettyprint.
		Rectangle min(Rectangle a, Rectangle b) {
			Rectangle minimum = a;
			if (a > b){
				minimum = b;
			}
			return minimum;
		}
	
	p operator 
		code <
		&nbsp;has to be defined for class 
		code Rectangle
		&nbsp;,otherwise compiler error

.slide
	h2 Function Templates - Example
	
	p Generic Sorting function (Bubblesort)
	pre.prettyprint.
		template <class T> void bubblesort(T items[], int n) {
			T temp;
			for (int i = 1; i < n; i++) {
				for (int j = n-1; j >= 1; j--) {
					if (items[j-1] > items[j]) {
						temp = items[j-1];
						items[j-1] = items[j];
						items[j] = temp;
					}
				}
			}
		}

.slide
	h2 Function Templates
	
	div Where to put the source of a template?
	pre.prettyprint template < class T > T min(T a, T b) { ... }
				
	div Place it in a header file
	ul
		li Each source file using the template includes the file
		li Each object file contains generated template instantiations
		li Linker merges duplicate instantiations in final executable
		li Disadvantage: Compilation overhead
	
	table
		tr
			td 
				pre.prettyprint.
					// file1.cpp
					#include "min.h"
					min<int>(...);
			td 
				pre.prettyprint.
					// file2.cpp
					#include "min.h"
					min<int>(...);

.slide
	h2 Class Templates
	
	ul
		li Creates new class on each "instance"
		li Defines a set of operations allowed on any data
		li Arguments: types, values, functions
	
	p Definition
	pre.prettyprint template <class T, ...> class class-name{...}
	
	
	p Usage
	pre.prettyprint classname < datatype > object-name;

.slide
	h2 Class Templates
	
	pre.prettyprint.
		template <class T> class Point{
			T _x;
			T _y;
		public:
			Point(T x, T y) : _x(x), _y(y){ }
			T getX(){
				return _x;
			}
			void flip(){
				return Point(-_x, -_y);
			}
			static Point copy(Point& p){
				return Point(p._x, p._y);
			}
		};
		
		Point<int> p(10,20);
		int x = p.getX();
		Point<int> q = p.flip();
		Point<int> p2 = Point<int>::copy(p);

.slide
	h2 Class Templates
	
	p Explicitly define template outside of class declaration
	
	pre.prettyprint.
		template<class T> Point<T>::Point(T a, T b) : x(a), y(b) {}

		template<class T> T Point<T>::getX() { 
			return x; 
		}

		template<class T> Point<T> Point<T>::flip() {
			return Point(-x,-y);
		}

		template<class T> static Point<T> Point<T>::copy(Point p) {
			return Point(p._x, p._y);
		}
	
	p Inside of class declaration 
		code Point
		&nbsp;is same as 
		code Point < T >

.slide
	h2 Class Templates
	
	ul
		li Separate multiple template definitions with a comma
		li Class templates may provide a default arguments
	pre.prettyprint.
		template <class T=int, class U=double> class Tuple{
			T _x; U _y;
		public:
			Tuple(T a, U b) : _x(a), _y(b){}
			T getX(){
				return _x;
			}
			U getY(){
				return _y;
			}
		};
		
		Tuple<int, int> t(120, 130); // T = int, U = int
		Tuple<double> t(120, 130); // T = double, U = double
		Tuple<> t(120, 130); // T = int, U = double

.slide
	h2 Templates - Parameter Values
	
	pre.prettyprint.
		template <int N=100, class T=int> class Array {
		protected:
			T a[N];
		public:
			Array(T x=0) {
				for (int i=0; i<N; i++){
					a[i]=x;
				}
			}
			
			virtual ~Array() {}
			int length() { return N; }
			T& operator[](int i) {
				if (i<0 || i>=N) throw out_of_range();
				return a[i];
			}
		};
		
		Array<50> a(-1); // Array<50,int>
		a[1] = a[1] + 1;
		Array<> b(-1); // Array<100,int>
		b[1] = b[1] + a[1];

.slide
	h2 Class Templates - Linked List
	
	img(src="linked_list_template.png")
	
	pre.prettyprint.
		template <class T> class LinkedList{
		public:
			Node<T> *first;
			virtual void insert (T element);
		};
		
		template <class T> class Node{
		public:
			Node *nextNode;
			T data;
		};

.slide
	h2 Class Templates - Linked List Implementation
	
	pre.prettyprint.
		template <class T> void insert(T element){
			Node<T> *newOne = new Node<T>(element);
			Node<T> *temp = first;
			if(first == NULL){
				first = newOne;
				return;
			}
			
			Node<T> *next = temp->nextNode;
			
			while((next != NULL) && element > next->data ){
				temp = next;
				next = temp->nextNode;
			}
			
			temp->nextNode = element;
			element->nextNode = next;
		}

.slide
	h2 Templates
	
	p Template classes support all mechanisms of OOP
	ul
		li Inheritance
		li Dynamic Binding/Polymorphism
	
	pre.prettyprint.
		template <class T> class CheckedLinkedList : public LinkedList<T>{
			T _maxElement;
		public:
			CheckedLinkedList(T maxElement) : LinkedList<T>{
				_maxElement = maxElement;
			}
			
			virtual void insert (T element){
				if(element < _maxElement){
					LinkedList<T>::insert(element);
				}
			}
		};
.slide
	h2 Templates
	
	div Pro
	ul
		li Define common operations on data only once (avoid code duplication)
		li Reduce complexity
		li Reduce error probabilities

	div Contra
	ul
		li Hidden code size (depends on compiler)
		li Sometimes hard to understand
		li Implicit requirements on parameter types
	